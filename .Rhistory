tic()
index_calculation(graph, B_ij_flag = TRUE, param = 0.6)
toc()
tic()
index_calculation(graph, B_ij_flag = TRUE, param = 0.6)
toc()
tic()
index_calculation(graph, B_ij_flag = TRUE, param = 0.6)
toc()
tic()
index_calculation(graph, B_ij_flag = TRUE, param = 0.6)
toc()
tic()
index_calculation(graph, B_ij_flag = TRUE, param = 0.6)
toc()
tic()
index_calculation(graph, B_ij_flag = TRUE, param = 0.6)
toc()
tic()
index_calculation(graph, B_ij_flag = TRUE, param = 0.6)
toc()
tic()
index_calculation(graph, B_ij_flag = TRUE, param = 0.6)
toc()
tic()
index_calculation(graph, B_ij_flag = TRUE, param = 0.6)
toc()
tic()
index_calculation(graph, B_ij_flag = TRUE, param = 0.6)
toc()
tic()
index_calculation(graph, B_ij_flag = TRUE, param = 0.6)
toc()
tic()
index_calculation(graph, B_ij_flag = TRUE, param = 0.6)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
library(riverconn)
#### Create Toy graph ####
g <- graph_from_literal(1-+2, 2-+5, 3-+4, 4-+5, 6-+7, 7-+10, 8-+9, 9-+10, 5-+11, 11-+12, 10-+13, 13-+12, 12-+14, 14-+15, 15-+16)
E(g)
E(g)$id_dam <- c("1", "NA", "2", "3", "NA", "4", "NA", "5", "6", "NA",  "NA", "NA", "NA", "7", "NA")
E(g)$type <- ifelse(is.na(E(g)$id_dam), "joint", "dam")
V(g)$length <- c(1, 1, 2, 3, 4, 1, 5, 1, 7, 7, 3, 2, 4, 5, 6, 9)
V(g)$HSI <- c(0.2, 0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8)
V(g)$Id <- V(g)$name
V(g)$name
# Check edged and nodes attributes
g_v_df <- igraph::as_data_frame(g, what = "vertices")
g_e_df <- igraph::as_data_frame(g, what = "edges") %>%
mutate(pass_u = ifelse(!(id_dam == "NA"),0.1,NA),
pass_d = ifelse(!(id_dam == "NA"),0.7,NA))
# Recreate graph
g <- igraph::graph_from_data_frame(d = g_e_df, vertices = g_v_df)
graph <- g
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
#' Calculates average upstream/downstream or combined distance between each couple of reaches
#'
#' @param graph an object of class igraph. Can be both directed or undirected.
#' @param dir_distance_type how directionality in B_ij calculations is dealt with:
#' \code{"symmetric"} (i.e. undirected graph) or \code{"asymmetric"} (i.e. directed graph). See details.
#' @param field_B the 'graph' edge attribute to be used to calculate the distance. Default is \code{"length"}.
#'
#' @return an object of class 'igraph' with the upstream/downstream/total distances stored as edges attributes.
#'
#' @importFrom dplyr select filter summarize left_join rename mutate rename_with contains matches group_by
#' @importFrom igraph E V
#'
#' @keywords internal
#'
set_B_directionality <- function(graph, dir_distance_type = "symmetric", field_B = "length"){
if( !(dir_distance_type %in% c("symmetric", "asymmetric")) ) stop("'dir_distance_type' must me either 'symmetric' or 'asymmetric'")
if( !(field_B %in% igraph::vertex_attr_names(graph)) ) stop("'field_B' argument must be a valid vertex attribute in 'graph'")
# get the vertices information
graph_v_df <- igraph::as_data_frame(graph, what = "vertices") %>%
dplyr::select(.data$name, matches(field_B))
# add the length attribute information to the edges information
graph_e_df <- igraph::as_data_frame(graph, what = "edges") %>%
dplyr::left_join(graph_v_df %>% rename(from = .data$name), by = "from") %>%
dplyr::rename(d_att_from = matches(field_B) ) %>%
dplyr::left_join(graph_v_df %>% rename(to = .data$name), by = "to") %>%
dplyr::rename(d_att_to = matches(field_B) ) %>%
dplyr::mutate(d_att = (.data$d_att_from + .data$d_att_to) / 2,
flag_dir = "n")
# create intermediate graph that has the distances
graph_intermediate <- igraph::graph_from_data_frame(d = graph_e_df, vertices = graph_v_df)
# If directionality is "asymmetric" the graph is made undirectional
if(dir_distance_type == "symmetric"){
# Bidirectional edge list
graph_df_bidir<- rbind(
# "downstream" graph: graph with directions going downstream, uses pass_d as attribute
igraph::as_data_frame(graph_intermediate, what = "edges") %>%
dplyr::mutate(flag_dir = "n"),
# "upstream" graph: graph with directions going upstream, uses pass_u as attribute
igraph::as_data_frame(graph_intermediate, what = "edges") %>%
dplyr::rename(from = .data$to, to = .data$from) %>%
mutate(flag_dir = "n")
)
# Vertices dataframe
graph_df_bidir_v <- igraph::as_data_frame(graph, what = "vertices") %>%
dplyr::relocate(.data$name)
# Create the bidirectional fraph
graph_output <- igraph::graph_from_data_frame(
d = graph_df_bidir,
vertices = graph_df_bidir_v )
}
# If directionality is "asymmetric" the graph is made undirectional
if(dir_distance_type == "asymmetric"){
# Bidirectional edge list
graph_df_bidir<- rbind(
# "downstream" graph: graph with directions going downstream, uses pass_d as attribute
igraph::as_data_frame(graph_intermediate, what = "edges") %>%
dplyr::mutate(flag_dir = "d"),
# "upstream" graph: graph with directions going upstream, uses pass_u as attribute
igraph::as_data_frame(graph_intermediate, what = "edges") %>%
dplyr::rename(from = .data$to, to = .data$from) %>%
mutate(flag_dir = "u")
)
# Vertices dataframe
graph_df_bidir_v <- igraph::as_data_frame(graph, what = "vertices") %>%
dplyr::relocate(.data$name)
# Create the bidirectional fraph
graph_output <- igraph::graph_from_data_frame(
d = graph_df_bidir,
vertices = graph_df_bidir_v )
}
return(graph_output)
}
dir_distance_type = "symmetric"
field_B = "length"
library(rgdal)
library(shp2graph)
library(riverconn)
library(igraph)
library(tidyverse)
# 10.01.2022
#### Create Toy graph ####
g <- graph_from_literal(1-+2, 2-+5, 3-+4, 4-+5, 6-+7, 7-+10, 8-+9, 9-+10, 5-+11, 11-+12, 10-+13, 13-+12, 12-+14, 14-+15, 15-+16)
E(g)
E(g)$id_dam <- c("1", "NA", "2", "3", "NA", "4", "NA", "5", "6", "NA",  "NA", "NA", "NA", "7", "NA")
E(g)$type <- ifelse(is.na(E(g)$id_dam), "joint", "dam")
V(g)$length <- c(1, 1, 2, 3, 4, 1, 5, 1, 7, 7, 3, 2, 4, 5, 6, 9)
V(g)$HSI <- c(0.2, 0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8)
V(g)$Id <- V(g)$name
V(g)$name
# Check edged and nodes attributes
g_v_df <- igraph::as_data_frame(g, what = "vertices")
g_e_df <- igraph::as_data_frame(g, what = "edges") %>%
mutate(pass_u = ifelse(!(id_dam == "NA"),0.1,NA),
pass_d = ifelse(!(id_dam == "NA"),0.7,NA))
# Recreate graph
g <- igraph::graph_from_data_frame(d = g_e_df, vertices = g_v_df)
graph <- g
# Set the directionality for Bij calculations
graph <- set_B_directionality(graph,
dir_distance_type = dir_distance_type,
field_B = field_B)
# Extract the vertices names
vertices_id <- names(igraph::V(graph))
# Create dodgr graph
graph_dodgr <- igraph::as_data_frame(graph, what = "edges") %>%
rename(dist = d_att) %>%
select(from, to, dist)
View(graph_dodgr)
# Calculate all shortest paths
Bij_mat <- dodgr::dodgr_dists(graph_dodgr, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), n = value) %>%
dplyr::select(from, to, n)
View(Bij_mat)
Bij_mat$B_ij = param^Bij_mat$n
param = 0.6
Bij_mat$B_ij = param^Bij_mat$n
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist) %>%
rbind(.,
. %>%
rename(from = to, to = from) %>%
mutate(dist = 0))
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist)
dir_distance_type = "asymmetric"
field_B = "length"
#### Create Toy graph ####
g <- graph_from_literal(1-+2, 2-+5, 3-+4, 4-+5, 6-+7, 7-+10, 8-+9, 9-+10, 5-+11, 11-+12, 10-+13, 13-+12, 12-+14, 14-+15, 15-+16)
E(g)
E(g)$id_dam <- c("1", "NA", "2", "3", "NA", "4", "NA", "5", "6", "NA",  "NA", "NA", "NA", "7", "NA")
E(g)$type <- ifelse(is.na(E(g)$id_dam), "joint", "dam")
V(g)$length <- c(1, 1, 2, 3, 4, 1, 5, 1, 7, 7, 3, 2, 4, 5, 6, 9)
V(g)$HSI <- c(0.2, 0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8)
V(g)$Id <- V(g)$name
V(g)$name
# Check edged and nodes attributes
g_v_df <- igraph::as_data_frame(g, what = "vertices")
g_e_df <- igraph::as_data_frame(g, what = "edges") %>%
mutate(pass_u = ifelse(!(id_dam == "NA"),0.1,NA),
pass_d = ifelse(!(id_dam == "NA"),0.7,NA))
# Recreate graph
g <- igraph::graph_from_data_frame(d = g_e_df, vertices = g_v_df)
graph <- g
# Set the directionality for Bij calculations
graph <- set_B_directionality(graph,
dir_distance_type = dir_distance_type,
field_B = field_B)
# Extract the vertices names
vertices_id <- names(igraph::V(graph))
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist)
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist)
graph_dodgr_u <- rbind(graph_dodgr_u,
graph_dodgr_u %>%
rename(from = to, to = from) %>%
mutate(dist = 0))
library(riverconn)
#### Create Toy graph ####
g <- graph_from_literal(1-+2, 2-+5, 3-+4, 4-+5, 6-+7, 7-+10, 8-+9, 9-+10, 5-+11, 11-+12, 10-+13, 13-+12, 12-+14, 14-+15, 15-+16)
E(g)
E(g)$id_dam <- c("1", "NA", "2", "3", "NA", "4", "NA", "5", "6", "NA",  "NA", "NA", "NA", "7", "NA")
E(g)$type <- ifelse(is.na(E(g)$id_dam), "joint", "dam")
V(g)$length <- c(1, 1, 2, 3, 4, 1, 5, 1, 7, 7, 3, 2, 4, 5, 6, 9)
V(g)$HSI <- c(0.2, 0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8)
V(g)$Id <- V(g)$name
V(g)$name
# Check edged and nodes attributes
g_v_df <- igraph::as_data_frame(g, what = "vertices")
g_e_df <- igraph::as_data_frame(g, what = "edges") %>%
mutate(pass_u = ifelse(!(id_dam == "NA"),0.1,NA),
pass_d = ifelse(!(id_dam == "NA"),0.7,NA))
# Recreate graph
g <- igraph::graph_from_data_frame(d = g_e_df, vertices = g_v_df)
graph <- g
tic()
index_calculation(graph, B_ij_flag = FALSE)
toc()
tic()
index_calculation(graph, dir_fragmentation_type = "asymmetric", B_ij_flag = FALSE)
toc()
tic()
index_calculation(graph, dir_fragmentation_type = "asymmetric", B_ij_flag = FALSE)
toc()
tic()
index_calculation(graph, dir_fragmentation_type = "asymmetric", B_ij_flag = FALSE)
toc()
tic()
index_calculation(graph, dir_fragmentation_type = "asymmetric", B_ij_flag = FALSE)
toc()
tic()
index_calculation(graph, dir_fragmentation_type = "asymmetric", B_ij_flag = FALSE)
toc()
tic()
index_calculation(graph, B_ij_flag = TRUE, param = 0.6)
toc()
tic()
index_calculation(graph, B_ij_flag = TRUE, param = 0.6)
toc()
tic()
index_calculation(graph, B_ij_flag = TRUE, param = 0.6)
toc()
tic()
index_calculation(graph, B_ij_flag = TRUE, param = 0.6)
toc()
tic()
index_calculation(graph, B_ij_flag = FALSE, param = 0.6)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
tic()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 0.6, param_d = 0.9)
toc()
index_calculation(graph, dir_distance_type = "asymmetric", param_u = 2, param_d = 5)
setwd("C:/Users/Damiano/Desktop/Andrea debug")
library(rgdal)
library(shp2graph)
library(riverconn)
# 13.12.2021
danube1 <- readOGR("DanubeDE_Gabcicovo3.shp", verbose = FALSE)
danube2 <- readshpnw(ntdata=danube1,ELComputed=TRUE)
danube3 <- nel2igraph(danube2[[2]],danube2[[3]],danube2[[4]])
##create a vertex weight
V(danube3)$length <- V(danube3)$weight <- strength(danube3)
components(danube3)$membership
V(danube3)$comp <- components(danube3)$membership
danube4 <- induced_subgraph(danube3,V(danube3)$comp==1)
components(danube4)
#set edge label
danube5<-set_edge_attr(danube4,"name", value = paste(1:22))
#set vertex label
danube6<-set_vertex_attr(danube5,"label", value = paste(1:23))
#set passability
E(danube6)$pass_u<-as.numeric(0.5)
E(danube6)$pass_d<-as.numeric(1)
igraph::as_data_frame(danube6, what = "edges")
igraph::as_data_frame(danube6, what = "vertices")
danube6 <- delete_edge_attr(danube6, "weight")
danube6
index1 <- index_calculation(danube6, nodes_id="label", weight = "weight",
index_type = "reach",  pass_u = "pass_u",  pass_d = "pass_d", index_mode = "to",
dir_fragmentation_type = "symmetric", pass_confluence = 1,  field_B = "weight",
dir_distance_type = "symmetric",  disp_type = "exponential",  param=0.5)
# Save function and submit
devtools::document()
setwd("C:/Users/Damiano/Dropbox/riverconn")
# Save function and submit
devtools::document()
# Save function and submit
devtools::document()
# Check everything
devtools::check()
old_path <- Sys.getenv("PATH")
Sys.setenv(PATH = paste(old_path, "C:\\Program Files\\qpdf-7.0.0\\bin", sep = ";"))
# Save function and submit
devtools::document()
# Check everything
devtools::check()
# Check everything
devtools::check()
setwd("C:/Users/Damiano/Desktop/Andrea debug")
library(rgdal)
library(shp2graph)
library(riverconn)
library(igraph)
library(tidyverse)
# 22.12.2021
am1<-as.matrix(read.table(file="adj_matrix.txt"))
g1<-graph_from_edgelist(am1)
plot(g1)
components(g1)
is_directed(g1)
vlength1<-read.table(file="centerpoint.txt",header=TRUE)
g2<-set_vertex_attr(g1, name='length', value=vlength1$length)
V(g2)$weight <- strength(g2)
E(g2)$pass_u<-as.numeric(0.5)
E(g2)$pass_d<-as.numeric(0.5)
g3<-set_vertex_attr(g2, name='name', value=paste(1:78))
g4<-set_edge_attr(g3, name='name', value=paste(1:77))
E(g4)$id_dam = E(g4)$name
graph <- g4
#alpha.centrality(g4)
#estimate_betweenness(g4, cutoff=1000)
#### other test with d_index_calculation
dams_metadata<-read.table("dam_metadata.txt", header=TRUE,colClasses=c("character","numeric","numeric"))
dams_metadata <- dams_metadata[10:12, 1:3]
colnames(dams_metadata) <- c("id_dam", "pass_u_updated", "pass_d_updated")
dams_metadata$pass_u_updated <- 1
dams_metadata$pass_d_updated <- 1
dams_metadata
plot(graph)
index2 <- d_index_calculation(g4,dams_metadata = dams_metadata,id_dam='id_dam', nodes_id = "name",
index_type = "full", mode="leave_one_out", pass_u = "pass_u",  pass_d = "pass_d",
dir_fragmentation_type = "symmetric", pass_confluence = 1,  field_B = "length",
dir_distance_type = "symmetric",
B_ij_flag = FALSE,
disp_type = "exponential",  param_u=0.5, param_d=1,param=1,
parallel=TRUE, ncores = 3)
#### other test with d_index_calculation
dams_metadata<-read.table("dam_metadata.txt", header=TRUE,colClasses=c("character","numeric","numeric"))
#dams_metadata <- dams_metadata[10:12, 1:3]
colnames(dams_metadata) <- c("id_dam", "pass_u_updated", "pass_d_updated")
dams_metadata$pass_u_updated <- 1
dams_metadata$pass_d_updated <- 1
dams_metadata
tic()
index2 <- d_index_calculation(g4,dams_metadata = dams_metadata,id_dam='id_dam', nodes_id = "name",
index_type = "full", mode="leave_one_out", pass_u = "pass_u",  pass_d = "pass_d",
dir_fragmentation_type = "symmetric", pass_confluence = 1,  field_B = "length",
dir_distance_type = "symmetric",
B_ij_flag = FALSE,
disp_type = "exponential",  param_u=0.5, param_d=1,param=1,
parallel=TRUE, ncores = 3)
toc()
index2
tic()
index_calculation(graph, param = 0.6)
toc()
setwd("C:/Users/Damiano/Desktop/Andrea debug")
library(rgdal)
library(shp2graph)
library(riverconn)
library(igraph)
library(tidyverse)
# 22.12.2021
am1<-as.matrix(read.table(file="adj_matrix.txt"))
g1<-graph_from_edgelist(am1)
plot(g1)
components(g1)
is_directed(g1)
vlength1<-read.table(file="centerpoint.txt",header=TRUE)
g2<-set_vertex_attr(g1, name='length', value=vlength1$length)
V(g2)$weight <- strength(g2)
E(g2)$pass_u<-as.numeric(0.5)
E(g2)$pass_d<-as.numeric(0.5)
g3<-set_vertex_attr(g2, name='name', value=paste(1:78))
g4<-set_edge_attr(g3, name='name', value=paste(1:77))
E(g4)$id_dam = E(g4)$name
graph <- g4
#alpha.centrality(g4)
#estimate_betweenness(g4, cutoff=1000)
#### other test with d_index_calculation
dams_metadata<-read.table("dam_metadata.txt", header=TRUE,colClasses=c("character","numeric","numeric"))
#dams_metadata <- dams_metadata[10:12, 1:3]
colnames(dams_metadata) <- c("id_dam", "pass_u_updated", "pass_d_updated")
dams_metadata$pass_u_updated <- 1
dams_metadata$pass_d_updated <- 1
dams_metadata
tic()
index2 <- d_index_calculation(g4,dams_metadata = dams_metadata,id_dam='id_dam', nodes_id = "name",
index_type = "full", mode="leave_one_out", pass_u = "pass_u",  pass_d = "pass_d",
dir_fragmentation_type = "symmetric", pass_confluence = 1,  field_B = "length",
dir_distance_type = "symmetric",
B_ij_flag = FALSE,
disp_type = "exponential",  param_u=0.5, param_d=1,param=1,
parallel=TRUE, ncores = 3)
toc()
library(tictoc)
View(index2)
index2 <- d_index_calculation(g4,dams_metadata = dams_metadata,id_dam='label',
nodes_id = "nodes_id", index_type = "full",
mode="leave_one_out", pass_u = "passy", pass_d = "passx",
dir_fragmentation_type = "asymmetric", pass_confluence = 1,
field_B = "length",dir_distance_type = "asymmetric", disp_type = "exponential",
param_u=0.5, param_d=1,param=1,parallel=FALSE)
#### other test with d_index_calculation
dams_metadata<-read.table("dam_metadata.txt", header=TRUE,colClasses=c("character","numeric","numeric"))
#dams_metadata <- dams_metadata[10:12, 1:3]
colnames(dams_metadata) <- c("id_dam", "pass_u_updated", "pass_d_updated")
dams_metadata$pass_u_updated <- 1
dams_metadata$pass_d_updated <- 1
dams_metadata
index2 <- d_index_calculation(g4,dams_metadata = dams_metadata,id_dam='id_dam',
nodes_id = "nodes_id", index_type = "full",
mode="leave_one_out", pass_u = "pass_x", pass_d = "pass_y",
dir_fragmentation_type = "asymmetric", pass_confluence = 1,
field_B = "length",dir_distance_type = "asymmetric", disp_type = "exponential",
param_u=0.5, param_d=1,param=1,parallel=FALSE)
index2 <- d_index_calculation(g4,dams_metadata = dams_metadata,id_dam='id_dam',
nodes_id = "nodes_id", index_type = "full",
mode="leave_one_out", pass_u = "pass_u", pass_d = "pass_d",
dir_fragmentation_type = "asymmetric", pass_confluence = 1,
field_B = "length",dir_distance_type = "asymmetric", disp_type = "exponential",
param_u=0.5, param_d=1,param=1,parallel=FALSE)
index2 <- d_index_calculation(g4,dams_metadata = dams_metadata,id_dam='id_dam',
nodes_id = "name", index_type = "full",
mode="leave_one_out", pass_u = "pass_u", pass_d = "pass_d",
dir_fragmentation_type = "asymmetric", pass_confluence = 1,
field_B = "length",dir_distance_type = "asymmetric", disp_type = "exponential",
param_u=0.5, param_d=1,param=1,parallel=FALSE)
index2
library(riverconn)
install.packages("RPostgreSQL")
library(riverconn)
remove.packages("riverconn", lib="~/R/win-library/4.1")
devtools::install_github("damianobaldan/riverconn", build_vignettes = TRUE)
library(riverconn)
