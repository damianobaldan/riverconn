filter(flag_dir == "u")
rename(dist = d_att) %>%
select(from, to, dist)
View(graph_dodgr_u)
Bij_mat <- dodgr::dodgr_dists(graph_dodgr, from = vertices_id, to = vertices_id)
Bij_mat <- dodgr::dodgr_dists(graph_dodgr_u, from = vertices_id, to = vertices_id)
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u")
rename(dist = d_att) %>%
select(from, to, dist)
# 10.01.2022
# Toy graph
g <- graph_from_literal(1-+2, 2-+5, 3-+4, 4-+5, 6-+7, 7-+10, 8-+9, 9-+10, 5-+11, 11-+12, 10-+13, 13-+12, 12-+14, 14-+15, 15-+16)
E(g)
E(g)$id_dam <- c("1", "NA", "2", "3", "NA", "4", "NA", "5", "6", "NA",  "NA", "NA", "NA", "7", "NA")
E(g)$type <- ifelse(is.na(E(g)$id_dam), "joint", "dam")
V(g)$length <- c(1, 1, 2, 3, 4, 1, 5, 1, 7, 7, 3, 2, 4, 5, 6, 9)
V(g)$HSI <- c(0.2, 0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8)
V(g)$Id <- V(g)$name
V(g)$name
# Check edged and nodes attributes
g_v_df <- igraph::as_data_frame(g, what = "vertices")
g_e_df <- igraph::as_data_frame(g, what = "edges") %>%
mutate(pass_u = ifelse(!(id_dam == "NA"),0.1,NA),
pass_d = ifelse(!(id_dam == "NA"),0.7,NA))
# Recreate graph
g <- igraph::graph_from_data_frame(d = g_e_df, vertices = g_v_df)
graph <- g
dir_fragmentation_type = "symmetric"
pass_confluence = 1
pass_u = "pass_u"
pass_d = "pass_d"
# Set the directionality for Bij calculations
graph <- set_B_directionality(graph,
dir_distance_type = dir_distance_type,
field_B = field_B)
# Extract the vertices names
vertices_id <- names(igraph::V(graph))
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u")
rename(dist = d_att) %>%
select(from, to, dist)
# Create dodgr graph
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist)
# Calculate all shortest paths
Bij_mat <- dodgr::dodgr_dists(graph_dodgr_u, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), u = value) %>%
dplyr::select(from, to, u)
Bij_mat <- dodgr::dodgr_dists(graph_dodgr_u, from = vertices_id, to = vertices_id)
View(Bij_mat)
Bij_mat <- dodgr::dodgr_dists(graph_dodgr_u, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), u = value) %>%
dplyr::select(from, to, u)
View(Bij_mat)
# Create dodgr graph for downstream movement
graph_dodgr_d <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "d") %>%
rename(dist = d_att) %>%
select(from, to, dist)
# Calculate all shortest paths for downstream movement
Bij_mat_d <- dodgr::dodgr_dists(graph_dodgr_d, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), d = value) %>%
dplyr::select(from, to, d)
# Create dodgr graph for upstream movement
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist)
# Calculate all shortest paths for upstream movement
Bij_mat_u <- dodgr::dodgr_dists(graph_dodgr_u, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), u = value) %>%
dplyr::select(from, to, u)
# Create dodgr graph for downstream movement
graph_dodgr_d <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "d") %>%
rename(dist = d_att) %>%
select(from, to, dist)
# Calculate all shortest paths for downstream movement
Bij_mat_d <- dodgr::dodgr_dists(graph_dodgr_d, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), d = value) %>%
dplyr::select(from, to, d)
Bij_mat <- B_ij_mat_u %>% left_join(B_ij_mat_d)
Bij_mat <- Bij_mat_u %>% left_join(Bij_mat_d)
View(Bij_mat)
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist)
View(graph_dodgr_u)
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist) %>%
rbind(., graph_dodgr_u %>%
mutate(from = to, to = from, dist = 0))
Bij_mat_u <- dodgr::dodgr_dists(graph_dodgr_u, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), u = value) %>%
dplyr::select(from, to, u)
View(Bij_mat_u)
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist) %>%
rbind(., graph_dodgr_u %>%
mutate(from = to, to = from, dist = 0))
# Calculate all shortest paths for upstream movement
Bij_mat_u <- dodgr::dodgr_dists(graph_dodgr_u, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), u = value) %>%
dplyr::select(from, to, u)
Bij_mat_u <- dodgr::dodgr_dists(graph_dodgr_u, from = vertices_id, to = vertices_id)
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist) %>%
rbind(., graph_dodgr_u %>%
mutate(from = to, to = from, dist = 0))
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist)
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist) %>%
rbind(., graph_dodgr_u %>%
rename(from = to, to = from) %>%
mutate(dist = 0))
# Calculate all shortest paths for upstream movement
Bij_mat_u <- dodgr::dodgr_dists(graph_dodgr_u, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), u = value) %>%
dplyr::select(from, to, u)
# Create dodgr graph for upstream movement
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist) %>%
rbind(., graph_dodgr_u %>%
rename(from = to, to = from) %>%
mutate(dist = 0))
# Calculate all shortest paths for upstream movement
Bij_mat_u <- dodgr::dodgr_dists(graph_dodgr_u, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), u = value) %>%
dplyr::select(from, to, u)
# Create dodgr graph for downstream movement
graph_dodgr_d <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "d") %>%
rename(dist = d_att) %>%
select(from, to, dist) %>%
rbind(., graph_dodgr_d %>%
rename(from = to, to = from) %>%
mutate(dist = 0))
# Calculate all shortest paths for downstream movement
Bij_mat_d <- dodgr::dodgr_dists(graph_dodgr_d, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), d = value) %>%
dplyr::select(from, to, d)
Bij_mat <- Bij_mat_u %>% left_join(Bij_mat_d)
View(Bij_mat)
# Create dodgr graph for upstream movement
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist) %>%
rbind(.,
graph_dodgr_u %>%
rename(from = to, to = from) %>%
mutate(dist = 0))
# Calculate all shortest paths for upstream movement
Bij_mat_u <- dodgr::dodgr_dists(graph_dodgr_u, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), u = value) %>%
dplyr::select(from, to, u)
View(Bij_mat_u)
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist) %>%
rbind(.,
graph_dodgr_u %>%
rename(from = to, to = from) %>%
mutate(dist = 0))
View(graph_dodgr_u)
# 10.01.2022
# Toy graph
g <- graph_from_literal(1-+2, 2-+5, 3-+4, 4-+5, 6-+7, 7-+10, 8-+9, 9-+10, 5-+11, 11-+12, 10-+13, 13-+12, 12-+14, 14-+15, 15-+16)
E(g)
E(g)$id_dam <- c("1", "NA", "2", "3", "NA", "4", "NA", "5", "6", "NA",  "NA", "NA", "NA", "7", "NA")
E(g)$type <- ifelse(is.na(E(g)$id_dam), "joint", "dam")
V(g)$length <- c(1, 1, 2, 3, 4, 1, 5, 1, 7, 7, 3, 2, 4, 5, 6, 9)
V(g)$HSI <- c(0.2, 0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8)
V(g)$Id <- V(g)$name
V(g)$name
# Check edged and nodes attributes
g_v_df <- igraph::as_data_frame(g, what = "vertices")
g_e_df <- igraph::as_data_frame(g, what = "edges") %>%
mutate(pass_u = ifelse(!(id_dam == "NA"),0.1,NA),
pass_d = ifelse(!(id_dam == "NA"),0.7,NA))
# Recreate graph
g <- igraph::graph_from_data_frame(d = g_e_df, vertices = g_v_df)
graph <- g
dir_fragmentation_type = "symmetric"
pass_confluence = 1
pass_u = "pass_u"
pass_d = "pass_d"
dir_distance_type
# Set the directionality for Bij calculations
graph <- set_B_directionality(graph,
dir_distance_type = dir_distance_type,
field_B = field_B)
# Extract the vertices names
vertices_id <- names(igraph::V(graph))
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist) %>%
rbind(.,
graph_dodgr_u %>%
rename(from = to, to = from) %>%
mutate(dist = 0))
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist)
graph_dodgr_u %>%
rename(from = to, to = from) %>%
mutate(dist = 0)
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist) %>%
rbind(.,
graph_dodgr_u %>%
rename(from = to, to = from) %>%
mutate(dist = 0))
# Calculate all shortest paths for upstream movement
Bij_mat_u <- dodgr::dodgr_dists(graph_dodgr_u, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), u = value) %>%
dplyr::select(from, to, u)
graph_dodgr_d <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "d") %>%
rename(dist = d_att) %>%
select(from, to, dist) %>%
rbind(.,
graph_dodgr_d %>%
rename(from = to, to = from) %>%
mutate(dist = 0))
graph_dodgr_d <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "d") %>%
rename(dist = d_att) %>%
select(from, to, dist)
graph_dodgr_d <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "d") %>%
rename(dist = d_att) %>%
select(from, to, dist) %>%
rbind(.,
graph_dodgr_d %>%
rename(from = to, to = from) %>%
mutate(dist = 0))
# Calculate all shortest paths for downstream movement
Bij_mat_d <- dodgr::dodgr_dists(graph_dodgr_d, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), d = value) %>%
dplyr::select(from, to, d)
View(Bij_mat_d)
Bij_mat <- Bij_mat_u %>% left_join(Bij_mat_d)
param_u = 0
param_d = 0.9
Bij_mat$B_ij = (param_u^Bij_mat$u) * (param_d^Bij_mat$d )
0.9^10
library(riverconn)
tic()
index_calculation(graph, param = 0.6)
toc()
tic()
index_calculation(graph, param = 0.6)
toc()
index_calculation(graph, B_ij_flag = FALSE, param = 0.6)
tic()
index_calculation(graph, B_ij_flag = FALSE, param = 0.6)
toc()
dir_distance_type = "symmetric"
# Toy graph
g <- graph_from_literal(1-+2, 2-+5, 3-+4, 4-+5, 6-+7, 7-+10, 8-+9, 9-+10, 5-+11, 11-+12, 10-+13, 13-+12, 12-+14, 14-+15, 15-+16)
E(g)
E(g)$id_dam <- c("1", "NA", "2", "3", "NA", "4", "NA", "5", "6", "NA",  "NA", "NA", "NA", "7", "NA")
E(g)$type <- ifelse(is.na(E(g)$id_dam), "joint", "dam")
V(g)$length <- c(1, 1, 2, 3, 4, 1, 5, 1, 7, 7, 3, 2, 4, 5, 6, 9)
V(g)$HSI <- c(0.2, 0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8)
V(g)$Id <- V(g)$name
V(g)$name
# Check edged and nodes attributes
g_v_df <- igraph::as_data_frame(g, what = "vertices")
g_e_df <- igraph::as_data_frame(g, what = "edges") %>%
mutate(pass_u = ifelse(!(id_dam == "NA"),0.1,NA),
pass_d = ifelse(!(id_dam == "NA"),0.7,NA))
# Recreate graph
g <- igraph::graph_from_data_frame(d = g_e_df, vertices = g_v_df)
graph <- g
dir_distance_type = "symmetric"
field_B = "length"
# Set the directionality for Bij calculations
graph <- set_B_directionality(graph,
dir_distance_type = dir_distance_type,
field_B = field_B)
# Extract the vertices names
vertices_id <- names(igraph::V(graph))
#
# symmetric dispersal: I use only the sum of the distances
#
if(dir_distance_type == "symmetric"){
# Create dodgr graph
graph_dodgr <- igraph::as_data_frame(graph, what = "edges") %>%
rename(dist = d_att) %>%
select(from, to, dist)
# Calculate all shortest paths
Bij_mat <- dodgr::dodgr_dists(graph_dodgr, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), n = value) %>%
dplyr::select(from, to, n)
# if exponential decay
if(disp_type == "exponential"){
Bij_mat$B_ij = param^Bij_mat$n }
# if threshold decay
if(disp_type == "threshold"){
Bij_mat$B_ij = ifelse(Bij_mat$n < param, 1, 0) }
}
disp_type == "exponential"
disp_type == "exponential"
disp_type = "exponential"
if(dir_distance_type == "symmetric"){
# Create dodgr graph
graph_dodgr <- igraph::as_data_frame(graph, what = "edges") %>%
rename(dist = d_att) %>%
select(from, to, dist)
# Calculate all shortest paths
Bij_mat <- dodgr::dodgr_dists(graph_dodgr, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), n = value) %>%
dplyr::select(from, to, n)
# if exponential decay
if(disp_type == "exponential"){
Bij_mat$B_ij = param^Bij_mat$n }
# if threshold decay
if(disp_type == "threshold"){
Bij_mat$B_ij = ifelse(Bij_mat$n < param, 1, 0) }
}
dir_distance_type = "asymmetric"
#
# asymmetric dispersal: I use both distances
#
if(dir_distance_type == "asymmetric"){
# Create dodgr graph for upstream movement
graph_dodgr_u <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "u") %>%
rename(dist = d_att) %>%
select(from, to, dist) %>%
rbind(.,
graph_dodgr_u %>%
rename(from = to, to = from) %>%
mutate(dist = 0))
# Calculate all shortest paths for upstream movement
Bij_mat_u <- dodgr::dodgr_dists(graph_dodgr_u, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), u = value) %>%
dplyr::select(from, to, u)
# Create dodgr graph for downstream movement
graph_dodgr_d <- igraph::as_data_frame(graph, what = "edges") %>%
filter(flag_dir == "d") %>%
rename(dist = d_att) %>%
select(from, to, dist) %>%
rbind(.,
graph_dodgr_d %>%
rename(from = to, to = from) %>%
mutate(dist = 0))
# Calculate all shortest paths for downstream movement
Bij_mat_d <- dodgr::dodgr_dists(graph_dodgr_d, from = vertices_id, to = vertices_id) %>%
reshape2::melt(.) %>%
dplyr::mutate(from = as.character(Var1), to = as.character(Var2), d = value) %>%
dplyr::select(from, to, d)
Bij_mat <- Bij_mat_u %>% left_join(Bij_mat_d)
# if exponential decay
if(disp_type == "exponential"){
Bij_mat$B_ij = (param_u^Bij_mat$u) * (param_d^Bij_mat$d )}
# if threshold decay
if(disp_type == "threshold"){
Bij_mat$B_ij = ifelse(Bij_mat$u <= param_u, 1, 0) * ifelse(Bij_mat$d <= param_d, 1, 0)  }
}
#' Calculates B_ij: the coincidence probability due to dispersal
#'
#' @param graph an object of class igraph. Can be both directed or undirected.
#' @param field_B the 'graph' edge attribute to be used to calculate the distance. Default is \code{"length"}.
#' @param dir_distance_type how directionality in B_ij calculations is dealt with:
#' \code{"symmetric"} (i.e. undirected graph) or \code{"asymmetric"} (i.e. directed graph). See details.
#' @param disp_type the formula used to calculate the probabilities in the B_ij matrix.
#' Use \code{"exponential"} for exponential decay, or \code{"threshold"} for setting a distance threshold.
#' @param param_u the upstream dispersal parameter. Must be a numeric value. Only used if \code{dir_distance_type = "asymmetric"}. See details.
#' @param param_d the downstream dispersal parameter. Must be a numeric value. Only used if \code{dir_distance_type = "asymmetric"}. See details.
#' @param param the dispersal parameter. Must be a numeric value. Only used if \code{dir_distance_type = "symmetric"}. See details.
#'
#' @return a matrix in data.frame format whose most relevant columns are 'from', 'to', and 'B_ij'.
#' For diagnosing purposes, also the distances are reported in the columns
#' 'n' (undirected distance), 'u'(upstream distance), and 'd'(downstream distance).
#' @export
#'
#' @details
#' \code{dir_distance_type = "symmetric"} is to be used when the directionality of the river network is not relevant.
#' The distance between reaches midpoints is calculated for each couple of reaches.
#' \code{dir_distance_type = "asymmetric"} is to be used when the directionality is relevant.
#' The distance between reaches midpoints is calculated for each couple of reaches and splitted
#' between 'upstream travelled' distance and 'downstream travelled' distance
#'
#' The 'param_u', 'param_d', and 'param' values are interpreted differently based on the formula used to relate distance and probability.
#' When \code{disp_type ="exponential"}, those values are used as the base of the exponential dispersal kernel: B_ij = param^{d_ij}.
#' When \code{disp_type ="threshold"}, those values are used to define the maximum dispersal length: B_ij = ifelse(d_ij < param, 1, 0).
#'
#' @importFrom dplyr select filter summarize left_join rename mutate rename_with contains matches group_by
#' @importFrom igraph E V
#' @importFrom rlang .data
#'
B_ij_fun <- function(graph, field_B = "length", dir_distance_type = "symmetric", disp_type = "exponential", param_u , param_d , param ) {
# Error messages
if( !(field_B %in% igraph::vertex_attr_names(graph)) ) stop(
"'field_B' argument must be a valid vertex attribute in 'graph'")
if( !(disp_type %in% c("exponential", "threshold")) ) stop(
"'disp_type' must be either 'exponential' or 'threshold'")
# Errors for asymmetric distance
if( dir_distance_type == "asymmetric"){
if( missing(param_u) | is.na(param_u) ) stop(
"'param_u' must be defined when dir_distance_type = 'asymmetric'")
if( missing(param_d) | is.na(param_d) ) stop(
"'param_d' must be defined when dir_distance_type = 'asymmetric'")
if( param_u < 0 | param_d < 0 ) stop(
"'param_u', 'param_d', and 'param' must be > 0")
if(  !is.numeric(param_u)) stop(
"'param_u' must be numeric")
if( !is.numeric(param_d)) stop(
"'param_d' must be numeric")
if(disp_type == "exponential") {
if( param_u > 1 | param_d > 1 ) stop(
"'param_u' and 'param_d' must be < 1 for disp_type == 'exponential'")
}}
# Errors for symmetric distance
if( dir_distance_type == "symmetric" ) {
if( missing(param) | is.na(param) )  stop(
"'param' must be specified when dir_distance_type = 'symmetric'")
if( param < 0  ) stop(
"'param_u', 'param_d', and 'param' must be > 0")
if(disp_type == "exponential") {
if( param > 1 ) stop(
"'param' must be < 1 for disp_type == 'exponential'")
} }
# Set the directionality for Bij calculations
graph <- set_B_directionality(graph,
dir_distance_type = dir_distance_type,
field_B = field_B)
# Extract the vertices names
vertices_id <- names(V(graph))
# Create data frame with all the combinations
Bij_mat <- tidyr::expand_grid(from = vertices_id, to = vertices_id)
# Function that extracts subgraph and calculate upstream and downstream distances
dist_calc <- function(i,j, graph){
subgraph <- igraph::subgraph.edges(
graph, igraph::shortest_paths(graph, from = i, to = j, mode = "out", output = "both")$epath[[1]])
d_att = igraph::get.edge.attribute(subgraph, "d_att")
flag_dir = igraph::get.edge.attribute(subgraph, "flag_dir")
output <- data.frame("from" = i, "to" = j,
"u" = sum(d_att[flag_dir == "u"]),
"d" = sum(d_att[flag_dir == "d"]),
"n" = sum(d_att[flag_dir == "n"]) )
return(list(output))
}
# Calculate u/d/n distances for each couple of nodes
Bij_mat <-  do.call(rbind,
mapply(
FUN = dist_calc,
Bij_mat$from, Bij_mat$to, list(graph))
)
# symmetric dispersal: I use only the sum of the distances
if(dir_distance_type == "symmetric"){
Bij_mat <- Bij_mat %>% dplyr::select(.data$from, .data$to, .data$n)
# if exponential decay
if(disp_type == "exponential"){
Bij_mat$B_ij = param^Bij_mat$n }
# if threshold decay
if(disp_type == "threshold"){
Bij_mat$B_ij = ifelse(Bij_mat$n < param, 1, 0) }
}
# asymmetric dispersal: I use both distances
if(dir_distance_type == "asymmetric"){
Bij_mat <- Bij_mat %>% dplyr::select(.data$from, .data$to, .data$u, .data$d)
# if exponential decay
if(disp_type == "exponential"){
Bij_mat$B_ij = (param_u^Bij_mat$u) * (param_d^Bij_mat$d )}
# if threshold decay
if(disp_type == "threshold"){
Bij_mat$B_ij = ifelse(Bij_mat$u <= param_u, 1, 0) * ifelse(Bij_mat$d <= param_d, 1, 0)  }
}
return(Bij_mat)
}
