dams_metadata,
id_dam = "id_dam",
pass_u_updated = "pass_u_updated",
pass_d_updated = "pass_d_updated",
mode = "leave_one_out", # "add_one", # sequence
parallel = TRUE,
ncores = 3,
weight = "length",
nodes_id = "name",
index_type = "full",
index_mode = "to",
c_ij_flag = TRUE,
B_ij_flag = TRUE,
dir_fragmentation_type = "symmetric",
pass_confluence = 1,
pass_u = "pass_u",
pass_d = "pass_d",
field_B = "length",
dir_distance_type = "symmetric",
disp_type = "exponential",
param_u = 0.5, param_d = 0.5, param = 0.5)
d_index_calculation(g,
dams_metadata,
id_dam = "id_dam",
pass_u_updated = "pass_u_updated",
pass_d_updated = "pass_d_updated",
mode = "leave_one_out", # "add_one", # sequence
parallel = FALSE,
ncores = 3,
weight = "length",
nodes_id = "name",
index_type = "full",
index_mode = "to",
c_ij_flag = TRUE,
B_ij_flag = TRUE,
dir_fragmentation_type = "symmetric",
pass_confluence = 1,
pass_u = "pass_u",
pass_d = "pass_d",
field_B = "length",
dir_distance_type = "symmetric",
disp_type = "exponential",
param_u = 0.5, param_d = 0.5, param = 0.5)
library(riverconn)
fun1 <- function(a, b = 1){return(a+b)}
fun1(1)
fun1(1,2)
fun_out <- function(a, ...){
if(missing(b)){b = 1}
fun1(a, b)
}
fun_out(1)
fun1(a, ...)
fun1(a)
fun_out <- function(a, ...){
fun1(a)
}
fun_out(1)
fun_out(1, 3)
fun_out <- function(a, ...){
fun1(a, ...)
}
fun_out(1, 3)
fun_out(1)
fun_out(1, 10)
fun1(1,10)
usethis::use_r("inner_d_index_calculation")
setwd("C:/Users/Damiano/Dropbox/riverconn")
usethis::use_r("inner_d_index_calculation")
setwd("C:/Users/Damiano/Dropbox/riverconn")
library(riverconn)
d_index_calculation(g,
dams_metadata,
id_dam = "id_dam",
pass_u_updated = "pass_u_updated",
pass_d_updated = "pass_d_updated",
mode = "leave_one_out", # "add_one", # sequence
parallel = FALSE,
ncores = 3,
dir_fragmentation_type = "symmetric",
pass_confluence = 1,
pass_u = "pass_u",
pass_d = "pass_d",
field_B = "length",
dir_distance_type = "symmetric",
disp_type = "exponential",
param_u = 0.5, param_d = 0.5, param = 0.5)
d_index_calculation(g,
dams_metadata,
id_dam = "id_dam",
pass_u_updated = "pass_u_updated",
pass_d_updated = "pass_d_updated",
mode = "leave_one_out", # "add_one", # sequence
parallel = TRUE,
ncores = 3,
dir_fragmentation_type = "symmetric",
pass_confluence = 1,
pass_u = "pass_u",
pass_d = "pass_d",
field_B = "length",
dir_distance_type = "symmetric",
disp_type = "exponential",
param_u = 0.5, param_d = 0.5, param = 0.5)
library(riverconn)
library(riverconn)
library(riverconn)
library(riverconn)
remove.packages("riverconn", lib="~/R/win-library/4.1")
library(riverconn)
library(riverconn)
remove.packages("riverconn", lib="~/R/win-library/4.1")
library(riverconn)
library(riverconn)
setwd("C:/Users/Damiano/Desktop/Andrea debug")
# 17.12.2021
am1<-as.matrix(read.table(file="adj_matrix.txt"))
g1<-graph_from_edgelist(am1)
plot(g1)
components(g1)
is_directed(g1)
vlength1<-read.table(file="centerpoint.txt",header=TRUE)
g2<-set_vertex_attr(g1, name='length', value=vlength1$length)
V(g2)$weight <- strength(g2)
E(g2)$passy<-as.numeric(0.5)
E(g2)$passx<-as.numeric(0.5)
g3<-set_vertex_attr(g2, name='label', value=paste(1:78))
g4<-set_edge_attr(g3, name='label', value=paste(1:77))
#alpha.centrality(g4)
#estimate_betweenness(g4, cutoff=1000)
#### other test with d_index_calculation
dams_metadata<-read.table("dam_metadata.txt", header=TRUE,colClasses=c("character","numeric","numeric"))
dams_metadata <- dams_metadata[10:13, 1:3]
colnames(dams_metadata) <- c("id_dam", "pass_u_updated", "pass_d_updated")
dams_metadata$pass_u_updated <- 1
dams_metadata$pass_d_updated <- 1
dams_metadata
dams_metadata
index2 <- riverconn::d_index_calculation(g4, dams_metadata=dams_metadata, id_dam = "label", index_type = "full",
mode="leave_one_out", dir_fragmentation_type = "symmetric", pass_confluence = 1,
field_B = "length", dir_distance_type = "symmetric", disp_type = "exponential",
parallel=TRUE, ncores = 3,  param = 0.5,
pass_u = "passx", pass_d = "passy",
nodes_id = "label", pass_u_updated = "pass_u_updated", pass_d_updated = "pass_d_updated")
dams_metadata
#### other test with d_index_calculation
dams_metadata<-read.table("dam_metadata.txt", header=TRUE,colClasses=c("character","numeric","numeric"))
dams_metadata <- dams_metadata[10:13, 1:3]
colnames(dams_metadata) <- c("label", "pass_u_updated", "pass_d_updated")
dams_metadata$pass_u_updated <- 1
dams_metadata$pass_d_updated <- 1
dams_metadata
index2 <- riverconn::d_index_calculation(g4, dams_metadata=dams_metadata, id_dam = "label", index_type = "full",
mode="leave_one_out", dir_fragmentation_type = "symmetric", pass_confluence = 1,
field_B = "length", dir_distance_type = "symmetric", disp_type = "exponential",
parallel=TRUE, ncores = 3,  param = 0.5,
pass_u = "passx", pass_d = "passy",
nodes_id = "label", pass_u_updated = "pass_u_updated", pass_d_updated = "pass_d_updated")
library(riverconn)
index2 <- riverconn::d_index_calculation(g4, dams_metadata=dams_metadata, id_dam = "label", index_type = "full",
mode="leave_one_out", dir_fragmentation_type = "symmetric", pass_confluence = 1,
field_B = "length", dir_distance_type = "symmetric", disp_type = "exponential",
parallel=TRUE, ncores = 3,  param = 0.5,
pass_u = "passx", pass_d = "passy",
nodes_id = "label", pass_u_updated = "pass_u_updated", pass_d_updated = "pass_d_updated")
index2 <- riverconn::d_index_calculation(g4, dams_metadata=dams_metadata, id_dam = "label", index_type = "full",
mode="leave_one_out", dir_fragmentation_type = "symmetric", pass_confluence = 1,
field_B = "length", dir_distance_type = "symmetric", disp_type = "exponential",
parallel=FALSE, ncores = 3,  param = 0.5,
pass_u = "passx", pass_d = "passy",
nodes_id = "label", pass_u_updated = "pass_u_updated", pass_d_updated = "pass_d_updated")
index2 <- riverconn::d_index_calculation(g4, dams_metadata=dams_metadata, id_dam = "label", index_type = "full",
mode="leave_one_out", dir_fragmentation_type = "symmetric", pass_confluence = 1,
field_B = "length", dir_distance_type = "symmetric", disp_type = "exponential",
parallel=FALSE, ncores = 3,  param = 0.5,
pass_u = "passx", pass_d = "passy",
nodes_id = "label", pass_u_updated = "pass_u_updated", pass_d_updated = "pass_d_updated")
index2 <- riverconn::d_index_calculation(g4, dams_metadata=dams_metadata, id_dam = "label", index_type = "full",
mode="leave_one_out", dir_fragmentation_type = "symmetric", pass_confluence = 1,
field_B = "length", dir_distance_type = "symmetric", disp_type = "exponential",
parallel=TRUE, ncores = 3,  param = 0.5,
pass_u = "passx", pass_d = "passy",
nodes_id = "label", pass_u_updated = "pass_u_updated", pass_d_updated = "pass_d_updated")
library(riverconn)
index2
# Toy graph
g <- graph_from_literal(1-+2, 2-+5, 3-+4, 4-+5, 6-+7, 7-+10, 8-+9, 9-+10, 5-+11, 11-+12, 10-+13, 13-+12, 12-+14, 14-+15, 15-+16)
E(g)
E(g)$id_dam <- c("1", "NA", "2", "3", "NA", "4", "NA", "5", "6", "NA",  "NA", "NA", "NA", "7", "NA")
E(g)$type <- ifelse(is.na(E(g)$id_dam), "joint", "dam")
V(g)$length <- c(1, 1, 2, 3, 4, 1, 5, 1, 7, 7, 3, 2, 4, 5, 6, 9)
V(g)$HSI <- c(0.2, 0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8)
V(g)$Id <- V(g)$name
V(g)$name
# Check edged and nodes attributes
g_v_df <- igraph::as_data_frame(g, what = "vertices")
g_e_df <- igraph::as_data_frame(g, what = "edges") %>%
mutate(pass_u = ifelse(!is.na(id_dam),0.1,NA),
pass_d = ifelse(!is.na(id_dam),0.7,NA))
# Recreate graph
graph <- g <- igraph::graph_from_data_frame(d = g_e_df, vertices = g_v_df)
# Passability metadata
dams_metadata <- data.frame("id_dam" = c("1", "2", "3", "4", "5", "6", "7"),
"pass_u_updated" = c(1,1,1,1,1,1,1),
"pass_d_updated" = c(1,1,1,1,1,1,1))
d_index_calculation(g,
dams_metadata,
id_dam = "id_dam",
pass_u_updated = "pass_u_updated",
pass_d_updated = "pass_d_updated",
mode = "leave_one_out", # "add_one", # sequence
parallel = TRUE,
ncores = 3)
# Toy graph
g <- graph_from_literal(1-+2, 2-+5, 3-+4, 4-+5, 6-+7, 7-+10, 8-+9, 9-+10, 5-+11, 11-+12, 10-+13, 13-+12, 12-+14, 14-+15, 15-+16)
E(g)
E(g)$id_dam <- c("1", "NA", "2", "3", "NA", "4", "NA", "5", "6", "NA",  "NA", "NA", "NA", "7", "NA")
E(g)$type <- ifelse(is.na(E(g)$id_dam), "joint", "dam")
V(g)$length <- c(1, 1, 2, 3, 4, 1, 5, 1, 7, 7, 3, 2, 4, 5, 6, 9)
V(g)$HSI <- c(0.2, 0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8)
V(g)$Id <- V(g)$name
V(g)$name
# Check edged and nodes attributes
g_v_df <- igraph::as_data_frame(g, what = "vertices")
g_e_df <- igraph::as_data_frame(g, what = "edges") %>%
mutate(pass_u = ifelse(!is.na(id_dam),0.1,NA),
pass_d = ifelse(!is.na(id_dam),0.7,NA))
# Recreate graph
graph <- g <- igraph::graph_from_data_frame(d = g_e_df, vertices = g_v_df)
# Passability metadata
dams_metadata <- data.frame("id_dam" = c("1", "2", "3", "4", "5", "6", "7"),
"pass_u_updated" = c(1,1,1,1,1,1,1),
"pass_d_updated" = c(1,1,1,1,1,1,1))
d_index_calculation(g,
dams_metadata,
id_dam = "id_dam",
pass_u_updated = "pass_u_updated",
pass_d_updated = "pass_d_updated",
mode = "leave_one_out", # "add_one", # sequence
parallel = TRUE,
ncores = 3)
library(igraph)
library(tidyverse)
library(ggnetwork)
library(viridis)
library(doParallel)
#source("dci_fun_v5.R")
# # Toy graph 1 -> from cotes example
# g <- graph_from_literal(1-+2)
# E(g)$id <- c( 1 )
# df_v <- data.frame("name" = 1:2, "length" = c(25, 5))
# df_e <- data.frame("id" = 1, "pass_u" = 0.7, "pass_d" = 0.7)
##### 1.1 create toy graph #####
# Toy graph
g <- graph_from_literal(1-+2, 2-+5, 3-+4, 4-+5, 6-+7, 7-+10, 8-+9, 9-+10, 5-+11, 11-+12, 10-+13, 13-+12, 12-+14, 14-+15, 15-+16)
E(g)
E(g)$id_dam <- c(1, NA, 2, 3, NA, 4, NA, 5, 6, NA,  NA, NA, NA, 7, NA)
E(g)$type <- ifelse(is.na(E(g)$id_dam), "joint", "dam")
V(g)$length <- c(1, 1, 2, 3, 4, 1, 5, 1, 7, 7, 3, 2, 4, 5, 6, 9)
V(g)$HSI <- c(0.2, 0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8)
V(g)$Id <- V(g)$name
V(g)$name
# Check edged and nodes attributes
g_v_df <- igraph::as_data_frame(g, what = "vertices")
g_e_df <- igraph::as_data_frame(g, what = "edges") %>%
mutate(pass_u = ifelse(!is.na(id_dam),0.1,NA),
pass_d = ifelse(!is.na(id_dam),0.7,NA))
# Recreate graph
graph <- g <- igraph::graph_from_data_frame(d = g_e_df, vertices = g_v_df)
# Toy graph
g <- graph_from_literal(1-+2, 2-+5, 3-+4, 4-+5, 6-+7, 7-+10, 8-+9, 9-+10, 5-+11, 11-+12, 10-+13, 13-+12, 12-+14, 14-+15, 15-+16)
E(g)
E(g)$id_dam <- c("1", "NA", "2", "3", "NA", "4", "NA", "5", "6", "NA",  "NA", "NA", "NA", "7", "NA")
E(g)$type <- ifelse(is.na(E(g)$id_dam), "joint", "dam")
V(g)$length <- c(1, 1, 2, 3, 4, 1, 5, 1, 7, 7, 3, 2, 4, 5, 6, 9)
V(g)$HSI <- c(0.2, 0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8)
V(g)$Id <- V(g)$name
V(g)$name
# Check edged and nodes attributes
g_v_df <- igraph::as_data_frame(g, what = "vertices")
g_e_df <- igraph::as_data_frame(g, what = "edges") %>%
mutate(pass_u = ifelse(!is.na(id_dam),0.1,NA),
pass_d = ifelse(!is.na(id_dam),0.7,NA))
# Recreate graph
graph <- g <- igraph::graph_from_data_frame(d = g_e_df, vertices = g_v_df)
# Passability metadata
dams_metadata <- data.frame("id_dam" = c("1", "2", "3", "4", "5", "6", "7"),
"pass_u_updated" = c(1,1,1,1,1,1,1),
"pass_d_updated" = c(1,1,1,1,1,1,1))
d_index_calculation(g,
dams_metadata,
id_dam = "id_dam",
pass_u_updated = "pass_u_updated",
pass_d_updated = "pass_d_updated",
mode = "leave_one_out", # "add_one", # sequence
parallel = TRUE,
ncores = 3)
d_index_calculation(g,
dams_metadata,
id_dam = "id_dam",
pass_u_updated = "pass_u_updated",
pass_d_updated = "pass_d_updated",
mode = "leave_one_out", # "add_one", # sequence
parallel = TRUE,
ncores = 3, param = 0.5)
d_index_calculation(g,
dams_metadata,
id_dam = "id_dam",
pass_u_updated = "pass_u_updated",
pass_d_updated = "pass_d_updated",
mode = "leave_one_out", # "add_one", # sequence
parallel = TRUE,
ncores = 3, param = 0.5)
d_index_calculation(g,
dams_metadata,
id_dam = "id_dam",
pass_u_updated = "pass_u_updated",
pass_d_updated = "pass_d_updated",
mode = "leave_one_out", # "add_one", # sequence
parallel = TRUE,
ncores = 3, param = 0.5)
install.packages("doParallel")
library(riverconn)
d_index_calculation(g,
dams_metadata,
id_dam = "id_dam",
pass_u_updated = "pass_u_updated",
pass_d_updated = "pass_d_updated",
mode = "leave_one_out", # "add_one", # sequence
parallel = TRUE,
ncores = 3, param = 0.5)
library(riverconn)
d_index_calculation(g,
dams_metadata,
id_dam = "id_dam",
pass_u_updated = "pass_u_updated",
pass_d_updated = "pass_d_updated",
mode = "leave_one_out", # "add_one", # sequence
parallel = TRUE,
ncores = 3, param = 0.5)
setwd("C:/Users/Damiano/Desktop/Andrea debug")
library(rgdal)
library(shp2graph)
library(riverconn)
# 17.12.2021
am1<-as.matrix(read.table(file="adj_matrix.txt"))
g1<-graph_from_edgelist(am1)
plot(g1)
components(g1)
is_directed(g1)
vlength1<-read.table(file="centerpoint.txt",header=TRUE)
g2<-set_vertex_attr(g1, name='length', value=vlength1$length)
V(g2)$weight <- strength(g2)
E(g2)$passy<-as.numeric(0.5)
E(g2)$passx<-as.numeric(0.5)
g3<-set_vertex_attr(g2, name='label', value=paste(1:78))
g4<-set_edge_attr(g3, name='label', value=paste(1:77))
#alpha.centrality(g4)
#### other test with d_index_calculation
dams_metadata<-read.table("dam_metadata.txt", header=TRUE,colClasses=c("character","numeric","numeric"))
dams_metadata <- dams_metadata[10:13, 1:3]
colnames(dams_metadata) <- c("label", "pass_u_updated", "pass_d_updated")
dams_metadata$pass_u_updated <- 1
dams_metadata$pass_d_updated <- 1
dams_metadata
dams_metadata
index2 <- d_index_calculation(g4, dams_metadata=dams_metadata, id_dam = "label", index_type = "full",
mode="leave_one_out", dir_fragmentation_type = "symmetric", pass_confluence = 1,
field_B = "length", dir_distance_type = "symmetric", disp_type = "exponential",
parallel=TRUE, ncores = 3,  param = 0.5,
pass_u = "passx", pass_d = "passy",
nodes_id = "label", pass_u_updated = "pass_u_updated", pass_d_updated = "pass_d_updated")
index2
# Save function and submit
devtools::document()
setwd("C:/Users/Damiano/Dropbox/riverconn")
# Save function and submit
devtools::document()
# Check everything
devtools::check()
Sys.getenv("PATH")
Sys.setenv(PATH = paste(old_path, "C:\\Program Files\\qpdf-7.0.0\\bin", sep = ";"))
old_path <- Sys.getenv("PATH")
Sys.setenv(PATH = paste(old_path, "C:\\Program Files\\qpdf-7.0.0\\bin", sep = ";"))
# Check everything
devtools::check()
# Check everything
devtools::check()
# Install package
devtools::install("C:/Users/Baldan/Dropbox/riverconn", build_vignettes = TRUE)
setwd("C:/Users/Damiano/Dropbox/riverconn")
# Install package
devtools::install("C:/Users/Baldan/Dropbox/riverconn", build_vignettes = TRUE)
devtools::install_github("damianobaldan/riverconn", build_vignettes = TRUE)
setwd("C:/Users/Damiano/Dropbox/riverconn")
library(rgdal)
library(shp2graph)
library(igraph)
danub1 <- readOGR("DanubeDE_Gabcicovo3.shp", verbose = FALSE)
danub2<-readshpnw(ntdata=danub1,ELComputed=TRUE)
danub3<-nel2igraph(danub2[[2]],danub2[[3]],danub2[[4]])
##create a vertex weight
V(danub3)$weight <- strength(danub3)
#set edge label
danub4<-set_edge_attr(danub3,"name", value = paste(1:60))
#set vertex label
danub5<-set_vertex_attr(danub4,"name", value = paste(1:65))
danub5 <- set_graph_directionality(danub5, field_name = "name", outlet_name = 63)
#set passability
E(danub5)$pass_u<-as.numeric(0.5)
setwd("C:/Users/Damiano/Dropbox/riverconn")
setwd("C:/Users/Damiano/Desktop/Andrea debug")
library(rgdal)
library(shp2graph)
library(igraph)
danub1 <- readOGR("DanubeDE_Gabcicovo3.shp", verbose = FALSE)
danub2<-readshpnw(ntdata=danub1,ELComputed=TRUE)
danub3<-nel2igraph(danub2[[2]],danub2[[3]],danub2[[4]])
##create a vertex weight
V(danub3)$weight <- strength(danub3)
#set edge label
danub4<-set_edge_attr(danub3,"name", value = paste(1:60))
#set vertex label
danub5<-set_vertex_attr(danub4,"name", value = paste(1:65))
danub5 <- set_graph_directionality(danub5, field_name = "name", outlet_name = 63)
library(riverconn)
danub5 <- set_graph_directionality(danub5, field_name = "name", outlet_name = 63)
# 13.12.2021
danube1 <- readOGR("DanubeDE_Gabcicovo3.shp", verbose = FALSE)
danube2 <- readshpnw(ntdata=danube1,ELComputed=TRUE)
danube3 <- nel2igraph(danube2[[2]],danube2[[3]],danube2[[4]])
##create a vertex weight
V(danube3)$length  <- V(danube3)$weight <- strength(danube3)
components(danube3)$membership
V(danube3)$comp <- components(danube3)$membership
danube4 <- induced_subgraph(danube3,V(danube3)$comp==1)
components(danube4)
#set edge label
danube5<-set_edge_attr(danube4,"name", value = paste(1:22))
#set vertex label
danube6<-set_vertex_attr(danube5,"name", value = paste(1:23))
danube6 <- delete_edge_attr(danube6, "weight")
#set passability
E(danube6)$pass_u<-as.numeric(0.5)
E(danube6)$pass_d<-as.numeric(1)
index_calculation(danube6, nodes_id = "name", weight = "length",
index_type = "full",  index_mode = "to",  dir_fragmentation_type = "symmetric",
pass_confluence = 1,  pass_u = "pass_u",  pass_d = "pass_d", field_B = "length",
dir_distance_type = "symmetric",  disp_type = "threshold",  param=2)
index_calculation(danube6, nodes_id = "name", weight = "length",
index_type = "full",  dir_fragmentation_type = "symmetric",
pass_confluence = 1,  pass_u = "pass_u",  pass_d = "pass_d", field_B = "length",
dir_distance_type = "symmetric",  disp_type = "threshold",  param=2)
index_calculation(danube6, nodes_id = "name", weight = "length",
index_type = "reach",  index_mode = "to",  dir_fragmentation_type = "symmetric",
pass_confluence = 1,  pass_u = "pass_u",  pass_d = "pass_d", field_B = "length",
dir_distance_type = "symmetric",  disp_type = "threshold",  param=2)
index_calculation(danube6, nodes_id = "name", weight = "length",
index_type = "full",  index_mode = "to",  dir_fragmentation_type = "asymmetric",
pass_confluence = 1,  pass_u = "pass_u",  pass_d = "pass_d", field_B = "length",
dir_distance_type = "symmetric",  disp_type = "threshold",  param=2)
danube6
plot(danube6)
danube6 <- set_graph_directionality(danube6, outlet_name = 6)
plot(danube6)
index_calculation(danube6, nodes_id = "name", weight = "length",
index_type = "full",  index_mode = "to",  dir_fragmentation_type = "asymmetric",
pass_confluence = 1,  pass_u = "pass_u",  pass_d = "pass_d", field_B = "length",
dir_distance_type = "symmetric",  disp_type = "threshold",  param=2)
index_calculation(danube6, nodes_id = "name", weight = "length",
index_type = "full",  index_mode = "to",  dir_fragmentation_type = "asymmetric",
pass_confluence = 1,  pass_u = "pass_u",  pass_d = "pass_d", field_B = "length",
dir_distance_type = "asymmetric",  disp_type = "threshold",  param=2)
index_calculation(danube6, nodes_id = "name", weight = "length",
index_type = "full",  index_mode = "to",  dir_fragmentation_type = "asymmetric",
pass_confluence = 1,  pass_u = "pass_u",  pass_d = "pass_d", field_B = "length",
dir_distance_type = "asymmetric",  disp_type = "threshold",  param_u = param_d =2)
index_calculation(danube6, nodes_id = "name", weight = "length",
index_type = "full",  index_mode = "to",  dir_fragmentation_type = "asymmetric",
pass_confluence = 1,  pass_u = "pass_u",  pass_d = "pass_d", field_B = "length",
dir_distance_type = "asymmetric",  disp_type = "threshold",  param_u = 0, param_d = 2)
library(rgdal)
library(shp2graph)
library(riverconn)
# 17.12.2021
am1<-as.matrix(read.table(file="adj_matrix.txt"))
g1<-graph_from_edgelist(am1)
plot(g1)
components(g1)
is_directed(g1)
vlength1<-read.table(file="centerpoint.txt",header=TRUE)
g2<-set_vertex_attr(g1, name='length', value=vlength1$length)
V(g2)$weight <- strength(g2)
E(g2)$passy<-as.numeric(0.5)
E(g2)$passx<-as.numeric(0.5)
g3<-set_vertex_attr(g2, name='label', value=paste(1:78))
g4<-set_edge_attr(g3, name='label', value=paste(1:77))
#alpha.centrality(g4)
#estimate_betweenness(g4, cutoff=1000)
#### other test with d_index_calculation
dams_metadata<-read.table("dam_metadata.txt", header=TRUE,colClasses=c("character","numeric","numeric"))
dams_metadata <- dams_metadata[10:13, 1:3]
colnames(dams_metadata) <- c("label", "pass_u_updated", "pass_d_updated")
dams_metadata$pass_u_updated <- 1
dams_metadata$pass_d_updated <- 1
dams_metadata
index2 <- riverconn::d_index_calculation(g4, dams_metadata=dams_metadata, id_dam = "label", index_type = "full",
mode="leave_one_out", dir_fragmentation_type = "symmetric", pass_confluence = 1,
field_B = "length", dir_distance_type = "symmetric", disp_type = "exponential",
parallel=TRUE, ncores = 3,  param = 0.5,
pass_u = "passx", pass_d = "passy",
nodes_id = "label", pass_u_updated = "pass_u_updated", pass_d_updated = "pass_d_updated")
index2
