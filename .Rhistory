dplyr::pull(.data$name) %>%
dplyr::last()
string_match <- sub('year_', "", x = string_match)
string_match
# extract the passability information for the year
time_dam_passability <- passability_metadata %>%
dplyr::mutate(year_no = 0, pass_no_u = 1, pass_no_d = 1) %>%
dplyr::filter(id_dam == dam) %>%
dplyr::select(contains(string_match))
View(time_dam_passability)
# Check everything
devtools::check()
passability_metadata %>%
select(-.data$id_dam) %>%
colnames()  %>%
sub('year_', "", x = .) %>%
sub('pass_', "", x = .) %>%
sub('_d', "", x = .) %>%
sub('_u', "", x = .)
# Error messages
check_string <- passability_metadata %>%
select(-.data$id_dam) %>%
colnames()  %>%
sub('year_', "", x = .data) %>%
sub('pass_', "", x = .data) %>%
sub('_d', "", x = .data) %>%
sub('_u', "", x = .data)
passability_metadata %>%
select(-.data$id_dam) %>%
colnames()  %>%
sub(pattern = 'year_', replacement = "")
passability_metadata %>%
select(-.data$id_dam) %>%
colnames()  %>%
sub(pattern = 'year_', replacement = "") %>%
sub(pattern ='pass_', replacement =  "") %>%
sub(pattern ='_d',  replacement = "") %>%
sub(pattern ='_u',  replacement = "")
# Check everything
devtools::check()
library(riverconn)
passability_metadata
# Passability metadata
passability_metadata <- data.frame("id_dam" = 1:7,
"year_c" = c(1950, 1960, 1965, 1980, 1990, 2020, 2010),
"pass_c_d" = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1),
"pass_c_u" = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1),
"year_fp" = c(1990, 1999, 1980, 2002, NA, NA, 2015),
"pass_fp_d" = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
"pass_fp_u" = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5)   )
# Create sequence of operations
seq_ops <- c("c", "fp")
dams_metadata <- t_sequencer(passability_metadata, seq_ops)
# Passability metadata
passability_metadata <- data.frame("id_dam" = 1:7,
"year_c" = c(1950, 1960, 1965, 1980, 1990, 2020, 2010),
"pass_c_d" = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1),
"pass_c_u" = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1),
"year_fp" = c(1990, 1999, 1980, 2002, NA, NA, 2015),
"pass_fp_d" = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
"pass_fp_u" = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5)   )
# Create sequence of operations
seq_ops <- c("c", "fp")
dams_metadata <- t_sequencer(passability_metadata, seq_ops)
# Passability metadata
passability_metadata <- data.frame("id_dam" = 1:7,
"year_c" = c(1950, 1960, 1965, 1980, 1990, 2020, 2010),
"pass_c_d" = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1),
"pass_c_u" = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1),
"year_fp" = c(1990, 1999, 1980, 2002, NA, NA, 2015),
"pass_fp_d" = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
"pass_fp_u" = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5)   )
# Create sequence of operations
seq_ops <- c("c", "fp")
dams_metadata <- t_sequencer(passability_metadata, seq_ops)
library(riverconn)
# Passability metadata
passability_metadata <- data.frame("id_dam" = 1:7,
"year_c" = c(1950, 1960, 1965, 1980, 1990, 2020, 2010),
"pass_c_d" = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1),
"pass_c_u" = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1),
"year_fp" = c(1990, 1999, 1980, 2002, NA, NA, 2015),
"pass_fp_d" = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
"pass_fp_u" = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5)   )
# Create sequence of operations
seq_ops <- c("c", "fp")
dams_metadata <- t_sequencer(passability_metadata, seq_ops)
#' relative passability parameters. For example, c can be used for construction, and fp for the implementation of a fish pass.
#' In this case, \code{passability_metadata} will have the fields 'year_c', 'pass_c_u', and 'pass_c_d', 'year_fp', 'pass_fp_u', and 'pass_fp_d'.
#' Then, the input \code{seq_ops = c("c", "fp")}, meaning that first the operation named 'c' occurred, and then the operation named 'fp' occurred.
#'
#'
#'
#' @importFrom dplyr select filter summarize left_join rename mutate rename_with contains matches group_by
#' @importFrom tidyselect starts_with everything
#' @importFrom igraph E V
#'
t_sequencer <- function(passability_metadata, seq_ops) {
# Error messages
check_string <- passability_metadata %>%
dplyr::select(-.data$id_dam) %>%
colnames()  %>%
sub(pattern = 'year_', replacement = "") %>%
sub(pattern ='pass_', replacement =  "") %>%
sub(pattern ='_d',  replacement = "") %>%
sub(pattern ='_u',  replacement = "")
if(sum(!(seq_ops %in% check_string)) > 1 ) stop("'seq_ops' must be mirrored in the 'dams_metadata' fields")
# Create vector with time steps for metadata creation
time_steps <- passability_metadata %>%
dplyr::select(starts_with("year")) %>%
tidyr::pivot_longer(cols = everything(), values_to = "years") %>%
dplyr::mutate(years_plus = .data$years + 1, years_minus = .data$years - 1) %>%
dplyr::select(-.data$name) %>%
tidyr::pivot_longer(cols = everything(), values_to = "years") %>%
dplyr::select(.data$years) %>%
dplyr::distinct() %>%
stats::na.omit() %>%
dplyr::arrange(.data$years) %>%
dplyr::pull(.data$years)
# Create vector with dams id for metadata creation
id_dam <- passability_metadata$id_dam
# Create metadata
time_metadata <- tidyr::expand_grid(time_steps = time_steps, id_dam = id_dam)
# Function that selects the right passability based on the year
temporal_table <- function(time_metadata, seq_ops, year, dam) {
# Add the pre-dam passability (set to 1 both pass_u and pass_d)
seq_ops_loop <- c("no", seq_ops)
# get the index (string_match) of the closest year
string_match <- passability_metadata %>%
dplyr::mutate(year_no = 0, pass_no_u = 1, pass_no_d = 1) %>%
dplyr::filter(id_dam == dam) %>%
dplyr::select(contains("year")) %>%
tidyr::pivot_longer(cols = contains(seq_ops_loop)) %>%
dplyr::filter(.data$value <= year) %>%
dplyr::pull(.data$name) %>%
dplyr::last()
string_match <- sub('year_', "", x = string_match)
# extract the passability information for the year
time_dam_passability <- passability_metadata %>%
dplyr::mutate(year_no = 0, pass_no_u = 1, pass_no_d = 1) %>%
dplyr::filter(id_dam == dam) %>%
dplyr::select(contains(string_match))
# return the data frame
out <- data.frame(
"id_dam" = dam,
"year" = year,
"pass_u" = time_dam_passability %>% dplyr::select(contains("_u")) %>% dplyr::pull(),
"pass_d" = time_dam_passability %>% dplyr::select(contains("_d")) %>% dplyr::pull()
) %>% list()
return(out)
}
# mapply function
out <- mapply(FUN = temporal_table, list(time_metadata), list(seq_ops),
year = time_metadata$time_steps, dam = time_metadata$id_dam)
return(do.call(rbind,out))
}
dams_metadata <- t_sequencer(passability_metadata, seq_ops)
t_index_calculation(g, dams_metadata,
parallel = FALSE, ncores = 3,
index_mode = "full",
param_u = 0.7, param_d = 0.7, param = 0.3)
# Toy graph
g <- graph_from_literal(1-+2, 2-+5, 3-+4, 4-+5, 6-+7, 7-+10, 8-+9, 9-+10, 5-+11, 11-+12, 10-+13, 13-+12, 12-+14, 14-+15, 15-+16)
E(g)
E(g)$id_dam <- c(1, NA, 2, 3, NA, 4, NA, 5, 6, NA,  NA, NA, NA, 7, NA)
E(g)$type <- ifelse(is.na(E(g)$id_dam), "joint", "dam")
V(g)$length <- c(1, 1, 2, 3, 4, 1, 5, 1, 7, 7, 3, 2, 4, 5, 6, 9)
V(g)$HSI <- c(0.2, 0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8)
V(g)$Id <- V(g)$name
V(g)$name
# Check edged and nodes attributes
g_v_df <- igraph::as_data_frame(g, what = "vertices")
g_e_df <- igraph::as_data_frame(g, what = "edges") %>%
mutate(pass_u = ifelse(!is.na(id_dam),0.1,NA),
pass_d = ifelse(!is.na(id_dam),0.7,NA))
# Recreate graph
graph <- g <- igraph::graph_from_data_frame(d = g_e_df, vertices = g_v_df)
# Passability metadata
passability_metadata <- data.frame("id_dam" = 1:7,
"year_c" = c(1950, 1960, 1965, 1980, 1990, 2020, 2010),
"pass_c_d" = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1),
"pass_c_u" = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1),
"year_fp" = c(1990, 1999, 1980, 2002, NA, NA, 2015),
"pass_fp_d" = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
"pass_fp_u" = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5)   )
# Save function and submit
devtools::document()
library(riverconn)
# Passability metadata
passability_metadata <- data.frame("id_dam" = 1:7,
"year_c" = c(1950, 1960, 1965, 1980, 1990, 2020, 2010),
"pass_c_d" = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1),
"pass_c_u" = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1),
"year_fp" = c(1990, 1999, 1980, 2002, NA, NA, 2015),
"pass_fp_d" = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
"pass_fp_u" = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5)   )
# Create sequence of operations
seq_ops <- c("c", "fp")
dams_metadata <- t_sequencer(passability_metadata, seq_ops)
t_index_calculation(g, dams_metadata,
parallel = FALSE, ncores = 3,
index_mode = "full",
param_u = 0.7, param_d = 0.7, param = 0.3)
# Save function and submit
devtools::document()
library(riverconn)
# Passability metadata
passability_metadata <- data.frame("id_dam" = 1:7,
"year_c" = c(1950, 1960, 1965, 1980, 1990, 2020, 2010),
"pass_c_d" = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1),
"pass_c_u" = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1),
"year_fp" = c(1990, 1999, 1980, 2002, NA, NA, 2015),
"pass_fp_d" = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
"pass_fp_u" = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5)   )
# Create sequence of operations
seq_ops <- c("c", "fp")
dams_metadata <- t_sequencer(passability_metadata, seq_ops)
t_index_calculation(g, dams_metadata,
parallel = FALSE, ncores = 3,
index_mode = "full",
param_u = 0.7, param_d = 0.7, param = 0.3)
# Toy graph
g <- graph_from_literal(1-+2, 2-+5, 3-+4, 4-+5, 6-+7, 7-+10, 8-+9, 9-+10, 5-+11, 11-+12, 10-+13, 13-+12, 12-+14, 14-+15, 15-+16)
E(g)
E(g)$id_dam <- c(1, NA, 2, 3, NA, 4, NA, 5, 6, NA,  NA, NA, NA, 7, NA)
E(g)$type <- ifelse(is.na(E(g)$id_dam), "joint", "dam")
V(g)$length <- c(1, 1, 2, 3, 4, 1, 5, 1, 7, 7, 3, 2, 4, 5, 6, 9)
V(g)$HSI <- c(0.2, 0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8)
V(g)$Id <- V(g)$name
V(g)$name
# Check edged and nodes attributes
g_v_df <- igraph::as_data_frame(g, what = "vertices")
g_e_df <- igraph::as_data_frame(g, what = "edges") %>%
mutate(pass_u = ifelse(!is.na(id_dam),0.1,NA),
pass_d = ifelse(!is.na(id_dam),0.7,NA))
# Recreate graph
graph <- g <- igraph::graph_from_data_frame(d = g_e_df, vertices = g_v_df)
# Toy graph
g <- graph_from_literal(1-+2, 2-+5, 3-+4, 4-+5, 6-+7, 7-+10, 8-+9, 9-+10, 5-+11, 11-+12, 10-+13, 13-+12, 12-+14, 14-+15, 15-+16)
E(g)
E(g)$id_dam <- c(1, NA, 2, 3, NA, 4, NA, 5, 6, NA,  NA, NA, NA, 7, NA)
E(g)$type <- ifelse(is.na(E(g)$id_dam), "joint", "dam")
V(g)$length <- c(1, 1, 2, 3, 4, 1, 5, 1, 7, 7, 3, 2, 4, 5, 6, 9)
V(g)$HSI <- c(0.2, 0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8)
V(g)$Id <- V(g)$name
V(g)$name
# Check edged and nodes attributes
g_v_df <- igraph::as_data_frame(g, what = "vertices")
g_e_df <- igraph::as_data_frame(g, what = "edges") %>%
mutate(pass_u = ifelse(!is.na(id_dam),0.1,NA),
pass_d = ifelse(!is.na(id_dam),0.7,NA))
# Recreate graph
graph <- g <- igraph::graph_from_data_frame(d = g_e_df, vertices = g_v_df)
library(igraph)
library(tidyverse)
library(ggnetwork)
library(viridis)
library(doParallel)
#source("dci_fun_v5.R")
# # Toy graph 1 -> from cotes example
# g <- graph_from_literal(1-+2)
# E(g)$id <- c( 1 )
# df_v <- data.frame("name" = 1:2, "length" = c(25, 5))
# df_e <- data.frame("id" = 1, "pass_u" = 0.7, "pass_d" = 0.7)
##### 1.1 create toy graph #####
# Toy graph
g <- graph_from_literal(1-+2, 2-+5, 3-+4, 4-+5, 6-+7, 7-+10, 8-+9, 9-+10, 5-+11, 11-+12, 10-+13, 13-+12, 12-+14, 14-+15, 15-+16)
E(g)
E(g)$id_dam <- c(1, NA, 2, 3, NA, 4, NA, 5, 6, NA,  NA, NA, NA, 7, NA)
E(g)$type <- ifelse(is.na(E(g)$id_dam), "joint", "dam")
V(g)$length <- c(1, 1, 2, 3, 4, 1, 5, 1, 7, 7, 3, 2, 4, 5, 6, 9)
V(g)$HSI <- c(0.2, 0.1, 0.3, 0.4, 0.5, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8)
V(g)$Id <- V(g)$name
V(g)$name
# Check edged and nodes attributes
g_v_df <- igraph::as_data_frame(g, what = "vertices")
g_e_df <- igraph::as_data_frame(g, what = "edges") %>%
mutate(pass_u = ifelse(!is.na(id_dam),0.1,NA),
pass_d = ifelse(!is.na(id_dam),0.7,NA))
# Recreate graph
graph <- g <- igraph::graph_from_data_frame(d = g_e_df, vertices = g_v_df)
t_index_calculation(g, dams_metadata,
parallel = FALSE, ncores = 3,
index_mode = "full",
param_u = 0.7, param_d = 0.7, param = 0.3)
# Save function and submit
devtools::document()
library(riverconn)
t_index_calculation(g, dams_metadata,
parallel = FALSE, ncores = 3,
index_mode = "full",
param_u = 0.7, param_d = 0.7, param = 0.3)
t_index_calculation(g, dams_metadata,
parallel = FALSE, ncores = 3,
index_mode = "full",
dir_distance_type = "asymmetric",
disp_type = "threshold",
param_u = 0, param_d = 10, param = 0.3)
a <- t_index_calculation(g, dams_metadata,
parallel = FALSE, ncores = 3,
index_mode = "full",
dir_distance_type = "asymmetric",
disp_type = "threshold",
param_u = 10, param_d = 20, param = 0.3)
View(a)
# 13.12.2021
danube1 <- readOGR("DanubeDE_Gabcicovo3.shp", verbose = FALSE)
danube2 <- readshpnw(ntdata=danube1,ELComputed=TRUE)
danube3 <- nel2igraph(danube2[[2]],danube2[[3]],danube2[[4]])
##create a vertex weight
V(danube3)$length <- V(danube3)$weight <- strength(danube3)
components(danube3)$membership
V(danube3)$comp <- components(danube3)$membership
danube4 <- induced_subgraph(danube3,V(danube3)$comp==1)
components(danube4)
library(rgdal)
library(shp2graph)
library(riverconn)
# 13.12.2021
danube1 <- readOGR("DanubeDE_Gabcicovo3.shp", verbose = FALSE)
danube2 <- readshpnw(ntdata=danube1,ELComputed=TRUE)
danube3 <- nel2igraph(danube2[[2]],danube2[[3]],danube2[[4]])
##create a vertex weight
V(danube3)$length <- V(danube3)$weight <- strength(danube3)
components(danube3)$membership
V(danube3)$comp <- components(danube3)$membership
danube4 <- induced_subgraph(danube3,V(danube3)$comp==1)
components(danube4)
setwd("C:/Users/Damiano/Desktop/Andrea debug")
library(rgdal)
library(shp2graph)
library(riverconn)
# 13.12.2021
danube1 <- readOGR("DanubeDE_Gabcicovo3.shp", verbose = FALSE)
danube2 <- readshpnw(ntdata=danube1,ELComputed=TRUE)
danube3 <- nel2igraph(danube2[[2]],danube2[[3]],danube2[[4]])
##create a vertex weight
V(danube3)$length <- V(danube3)$weight <- strength(danube3)
components(danube3)$membership
V(danube3)$comp <- components(danube3)$membership
danube4 <- induced_subgraph(danube3,V(danube3)$comp==1)
components(danube4)
library(riverconn)
library(riverconn)
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
# Save function and submit
devtools::document()
# Check everything
devtools::check()
install.packages("qpdf")
# Check everything
devtools::check()
library(rgdal)
library(shp2graph)
library(riverconn)
# 14.12.2021
danube1 <- readOGR("DanubeDE_Gabcicovo3.shp", verbose = FALSE)
danube2<-readshpnw(ntdata=danube1,ELComputed=TRUE)
danube3<-nel2igraph(danube2[[2]],danube2[[3]],danube2[[4]])
##create a vertex weight
V(danube3)$weight <- strength(danube3)
V(danube3)$asd <- V(danube3)$weight <- strength(danube3)
components(danube3)$membership
V(danube3)$comp <- components(danube3)$membership
danube4 <- induced_subgraph(danube3,V(danube3)$comp==1)
#set edge label
danube5<-set_edge_attr(danube4,"name", value = paste(1:22))
#set vertex label
danube6<-set_vertex_attr(danube5,"name", value = paste(1:23))
#set passability
E(danube6)$passy<-as.numeric(0.5)
E(danube6)$passx<-as.numeric(1)
danube6 <- delete_edge_attr(danube6, "weight")
danube6 <- set_graph_directionality(danube6, field_name = "name", outlet_name = 6)
index1<-index_calculation(danube6, nodes_id="name", weight = "weight",
index_type = "reach",  pass_u = "passy",  pass_d = "passx", index_mode = "to",
dir_fragmentation_type = "asymmetric", pass_confluence = 1,  field_B = "asd",
dir_distance_type = "symmetric",  disp_type = "exponential",  param_u=1, param_d=1, param = 1)
library(riverconn)
library(riverconn)
install.packages("C:/Users/Damiano/Dropbox/riverconn_0.1.6.tar.gz", repos = NULL, type = "source")
detach("package:riverconn", unload = TRUE)
install.packages("C:/Users/Damiano/Dropbox/riverconn_0.1.6.tar.gz", repos = NULL, type = "source")
library(riverconn)
# Save function and submit
devtools::document()
devtools::load_all()
devtools::build()
library(riverconn)
detach("package:riverconn", unload = TRUE)
# Check everything
devtools::check()
read.dcf("C:/Users/Damiano/Dropbox/riverconn/DESCRIPTION")
desc_add_author(
given = Damiano,
family = Baldan,
email = damiano.baldan91@gmail.com,
role = aut,
orcid ="0000-0001-9237-4883"
)
desc::desc_add_author(
given = Damiano,
family = Baldan,
email = damiano.baldan91@gmail.com,
role = aut,
orcid ="0000-0001-9237-4883"
)
desc::desc_add_author(
given = "Damiano",
family = "Baldan",
email = "damiano.baldan91@gmail.com",
role = "aut",
orcid ="0000-0001-9237-4883"
)
desc::desc_add_author(
given = "David",
family = "Cunillera-Montcusì",
role = "ctb",
orcid ="0000-0001-8666-346X"
)
desc::desc_add_author(
given = "Andrea",
family = "Funk",
role = "ctb",
orcid ="0000-0002-0568-1234"
)
##### Check issues in description file #####
read.dcf("C:/Users/Damiano/Dropbox/riverconn/DESCRIPTION")
##### Check issues in description file #####
read.dcf("C:/Users/Damiano/Dropbox/riverconn/DESCRIPTION")
# Save function and submit
devtools::document()
# Check everything
devtools::check()
# Check everything
devtools::check()
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
##### qpdf issue #####
write('PATH=C:\Program Files\qpdf-7.0.0\bin', file = "~/.Renviron", append = TRUE)
##### qpdf issue #####
write('PATH=C:/Program Files/qpdf-7.0.0/bin', file = "~/.Renviron", append = TRUE)
writeLines('PATH="C:\rtools40\usr\bin;${PATH}"', con = "~/.Renviron")
writeLines('PATH="C:\rtools40\usr\bin;${PATH}"', con = "~/.Renviron")
##### qpdf issue #####
write('PATH="C:/rtools40/usr/bin;${PATH}"', file = "~/.Renviron", append = TRUE)
library(devtools)
# Save function and submit
devtools::document()
# Check everything
devtools::check()
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("R_QPDF", "qpdf")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
Sys.setenv(PATH = paste(old_path, "C:\\Program Files\qpdf-7.0.0\bin", sep = ";"))
Sys.setenv(PATH = paste(old_path, "C:\\Program Files\\qpdf-7.0.0\\bin", sep = ";"))
Sys.getenv("PATH")
person("Hadley", "Wickham", email = "hadley@rstudio.com",
role = c("aut", "cre"))
person"Damiano", "Baldan", email = "damiano.baldan91@gmail.com", role = c("aut", "cre"),
comment = c(ORCID = "0000-0001-9237-4883")
person("Damiano", "Baldan", email = "damiano.baldan91@gmail.com", role = c("aut", "cre"),
comment = c(ORCID = "0000-0001-9237-4883"))
c(
person("Damiano", "Baldan", email = "damiano.baldan91@gmail.com", role = c("aut", "cre"),
comment = c(ORCID = "0000-0001-9237-4883")),
person("David", "Cunillera-Montcusi", role = "ctb"),
person("Andrea","Funk", role = "ctb"))
c(
person("Damiano", "Baldan", email = "damiano.baldan91@gmail.com", role = c("aut", "cre"),
comment = c(ORCID = "0000-0001-9237-4883")),
person("David", "Cunillera-Montcusi", role = "ctb", comment = c(ORCID = "0000-0001-8666-346X")),
person("Andrea","Funk", role = "ctb", comment = c(ORCID = "0000-0002-0568-1234")))
library(riverconn)
# Check everything
devtools::check()
# Save function and submit
devtools::document()
# Install package
devtools::install("C:/Users/Baldan/Dropbox/riverconn", build_vignettes = TRUE)
setwd("C:/Users/Damiano/Dropbox/riverconn")
# Install package
devtools::install("C:/Users/Baldan/Dropbox/riverconn", build_vignettes = TRUE)
# Load functions for testing
devtools::load_all("C:/Users/Baldan/Desktop/riverconn/riverconn")
remove.packages("riverconn", lib="~/R/win-library/4.1")
install.packages("C:/Users/Damiano/Dropbox/riverconn_0.1.7.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Damiano/Dropbox/riverconn_0.1.7.zip", repos = NULL, type = "win.binary")
library(riverconn)
library(riverconn)
detach("package:riverconn", unload = TRUE)
remove.packages("riverconn", lib="~/R/win-library/4.1")
install.packages("C:/Users/Damiano/Dropbox/riverconn_0.1.7.tar.gz", repos = NULL, type = "source")
library(riverconn)
library(usethis)
create_github_token()
Sys.setenv(PATH = paste(old_path, "C:\\Program Files\\Git\\bin", sep = ";"))
library(riverconn)
# Check everything
devtools::check()
remove.packages("riverconn", lib="~/R/win-library/4.1")
install_github("damianobaldan/riverconn")
devtools::install_github("damianobaldan/riverconn")
devtools::install_github("damianobaldan/riverconn")
setwd("C:/Users/Damiano/Dropbox/riverconn")
devtools::install_github("damianobaldan/riverconn")
remove.packages("riverconn", lib="~/R/win-library/4.1")
devtools::install_github("damianobaldan/riverconn", build_vignettes = TRUE)
devtools::install_github("damianobaldan/riverconn", build_vignettes = TRUE)
